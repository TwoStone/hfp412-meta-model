
	private Set<PersistentMAspect> getAspects() throws PersistenceException {
		return Sets.transform(this.getThis().getTypes().getList(),
				new Lists.FunctionWithResult<PersistentMAtomicType, PersistentMAspect>() {

					@Override
					public PersistentMAspect apply(PersistentMAtomicType element) {
						try {
							return element.getAspect();
						} catch (PersistenceException e) {
							throw new RuntimeException(e);
						}
					}
				});
	}

	/**
	 * Ermittelt ausgehend von einem Typen alle Objekte dazugehoerigen, die ueber einen Link erreichbar sein sollen.
	 * 
	 * @param type
	 * @return
	 * @throws PersistenceException
	 */
	// private MObjectSearchList getPossibleLinkTargets(PersistentMType type) throws PersistenceException {
	// final MObjectSearchList possibleLinkTargets = new MObjectSearchList();
	//
	// type.accept(new MTypeVisitor() {
	//
	// @Override
	// public void handleMProductType(PersistentMProductType mProductType) throws PersistenceException {
	// // Wird schon ueber AtomicType erledigt, oder?
	// }
	//
	// @Override
	// public void handleMEmptyProductType(PersistentMEmptyProductType mEmptyProductType)
	// throws PersistenceException {
	// // Kommt beabsichtigt nicht mit rein
	// }
	//
	// @Override
	// public void handleMSumType(PersistentMSumType mSumType) throws PersistenceException {
	// // Durch alle Elemente des Summentypen iterieren und alle Objekte zu den Elementen mit aufnehmen
	// mSumType.getContainedTypes().applyToAll(new Procdure<PersistentMType>() {
	//
	// @Override
	// public void doItTo(PersistentMType argument) throws PersistenceException {
	// possibleLinkTargets.add(getPossibleLinkTargets(argument));
	// }
	// });
	// }
	//
	// @Override
	// public void handleMEmptySumType(PersistentMEmptySumType mEmptySumType) throws PersistenceException {
	// // Beabsichtigt leer
	// }
	//
	// @Override
	// public void handleMAtomicType(PersistentMAtomicType mAtomicType) throws PersistenceException {
	// // Alle Objekte aufnehmen
	// possibleLinkTargets.add(mAtomicType.inverseGetTypes());
	// }
	// });
	//
	// return possibleLinkTargets;
	// }

	