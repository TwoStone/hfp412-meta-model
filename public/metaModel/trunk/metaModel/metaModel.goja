model metaModel{

server Server {
	derived TypeManager typeManager;
	derived AspectManager aspectManager;
	void addAtomicType(MAspect aspect, String name);
}

singleton AspectManager {
	MAspect** aspects;
	active void addAspect(String name) throws DoubleDefinitionException;
}

singleton TypeManager {
	MAtomicType** atomicTypes;
	MProductType** productTypes;
	MSumType** sumTypes;
	active void addAtomicType(MAspect aspect, String name) throws DoubleDefinitionException;
}

class MAspect {
	prior indexed String name; 
}

interface MType@@Type {
	String fetchName();
}

class MAtomicType@@AtomicType implements MType {
	prior indexed String name;
	prior symmetric(types) MAspect aspect; 
}

abstract class MComplexType@@ComplexType implements MType {
	MType** containedTypes hierarchy MCTypeHierarchy;
	derived String TypeLinkOperator;	
}

class MProductType@@ProductType extends MComplexType {
}

class MSumType@@SumType extends MComplexType {
}

hierarchy MCTypeHierarchy;
exception DoubleDefinitionException{}

}