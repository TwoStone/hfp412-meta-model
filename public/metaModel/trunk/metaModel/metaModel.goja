model metaModel{


/*** SERVER ***/

server Server {
	derived TypeManager typeManager;
	derived AspectManager aspectManager;
	void addAtomicType(MAspect aspect, String name);

	void addAspect(String name) throws DoubleDefinitionException;
}


/*** MANAGER ***/

singleton AspectManager {
	MAspect** aspects;
	active void addAspect(String name) throws DoubleDefinitionException;
}

singleton TypeManager {
	MAtomicType** atomicTypes;
	MProductType** productTypes;
	MSumType** sumTypes;
	active void addAtomicType(MAspect aspect, String name) throws DoubleDefinitionException;
}


/*** TYPE ***/

class MAspect {
	prior indexed String name; 
}

interface MType@@Type {
	String fetchName();
}

hierarchy MAtomicTypeHierarchy##MATypeHier;

class MAtomicType@@AtomicType implements MType {
	prior indexed String name;
	no-view prior symmetric(types) MAspect aspect;
	symmetric(subTypes) MAtomicType superType hierarchy MAtomicTypeHierarchy;
	derived MType** superTypes;
}

hierarchy MComplexTypeHierarchy##MCTypeHier;

abstract class MComplexType@@ComplexType implements MType {
	MType** containedTypes hierarchy MComplexTypeHierarchy;
	derived String TypeLinkOperator;	
}

class MProductType@@ProductType extends MComplexType {}

class MSumType@@SumType extends MComplexType {}


/*** EXCEPTIONS ***/

exception DoubleDefinitionException{}

}