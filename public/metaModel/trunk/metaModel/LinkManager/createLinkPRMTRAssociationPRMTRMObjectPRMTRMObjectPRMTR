{

		if (target.containsInHierarchies(source, type.getHierarchies().getList()).toBoolean()) {
			throw new CycleException("Es entstuende ein Zyklus ,beim anlegen einer des Links von " + source + " nach "
					+ target);
		}

		MObjectSearchList possibleSources = ObjectManager.getTheObjectManager()
				.fetchObjectsWithTypeLE(type.getSource());

		MObjectSearchList possibleTargets = ObjectManager.getTheObjectManager()
				.fetchObjectsWithTypeLE(type.getTarget());

		// Passt die Source zum Association,Type?
		if (possibleSources.findFirst(new Predcate<PersistentMObject>() {

			@Override
			public boolean test(PersistentMObject argument) throws PersistenceException {
				return argument.equals(source);
			}
		}) == null) {
			throw new ConsistencyException("Die gewaehlte Source passt nicht zum AssoicationType!");
		}

		// Ist das Target gemaess Typebene korrekt?
		if (possibleTargets.findFirst(new Predcate<PersistentMObject>() {

			@Override
			public boolean test(PersistentMObject argument) throws PersistenceException {
				return argument.equals(target);
			}
		}) == null) {
			throw new ConsistencyException("Das gewaehlte Target passt nicht zum AssoicationType!");
		}

		getThis().getLinks().add(Link.createLink(source, target, type));
	}