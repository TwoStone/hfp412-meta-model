{
		return MBoolean.createFromBoolean(other.accept(new MTypeReturnVisitor<Boolean>() {

			@Override
			public Boolean handleMMixedTypeDisjunction(PersistentMMixedTypeDisjunction mMixedTypeDisjunction)
					throws PersistenceException {
				Iterator<PersistentMType> iterator = mMixedTypeDisjunction.getAddends().iterator();
				while (iterator.hasNext()) {
					if (getThis().isLessOrEqual(iterator.next()).toBoolean()) {
						return true;
					}
				}
				return false;
			}

			@Override
			public Boolean handleMEmptyTypeDisjunction(PersistentMEmptyTypeDisjunction mEmptyTypeDisjunction)
					throws PersistenceException {
				return false;
			}

			@Override
			public Boolean handleMNonEmptyDisjunctiveNormalForm(
					PersistentMNonEmptyDisjunctiveNormalForm mNonEmptyDisjunctiveNormalForm)
					throws PersistenceException {
				Iterator<PersistentMAtomicTypeConjunction> iterator = mNonEmptyDisjunctiveNormalForm.getAddends()
						.iterator();
				while (iterator.hasNext()) {
					if (getThis().isLessOrEqual(iterator.next()).toBoolean()) {
						return true;
					}
				}
				return false;
			}

			@Override
			public Boolean handleMMixedConjunction(PersistentMMixedConjunction mMixedConjunction)
					throws PersistenceException {
				Iterator<PersistentMType> iterator = mMixedConjunction.getFactors().iterator();
				while (iterator.hasNext()) {
					if (!getThis().isLessOrEqual(iterator.next()).toBoolean()) {
						return false;
					}
				}
				return true;
			}

			@Override
			public Boolean handleMNonEmptyAtomicTypeConjunction(
					PersistentMNonEmptyAtomicTypeConjunction mNonEmptyAtomicTypeConjunction)
					throws PersistenceException {
				Iterator<PersistentMAtomicType> iterator = mNonEmptyAtomicTypeConjunction.getFactors().iterator();
				while (iterator.hasNext()) {
					if (!getThis().isLessOrEqual(iterator.next()).toBoolean()) {
						return false;
					}
				}
				return true;
			}

			@Override
			public Boolean handleMEmptyTypeConjunction(PersistentMEmptyTypeConjunction mEmptyTypeConjunction)
					throws PersistenceException {
				return true;
			}

			@Override
			public Boolean handleMAtomicType(PersistentMAtomicType mAtomicType) throws PersistenceException {
				return getThis().containsMAtomicTypeHierarchy(mAtomicType);
			}
		}));
	}