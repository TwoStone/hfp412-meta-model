{
		if (!this.isArgumentCompound(factor)) {
			final PersistentQuantity factorAsQuantity = (PersistentQuantity) factor;
			final PersistentAbsUnit myUnit = getThis().getUnit();
			final PersistentAbsUnit factorUnit = factorAsQuantity.getUnit();

			final SummableHashMap<PersistentUnit> computedRefs = this.computeReferences(myUnit, factorUnit);
			PersistentAbsUnit targetUnit = this.findTargetUnit(computedRefs);

			if (targetUnit == null) {

				// TODO: Ziel-UnitType bestimmen
				final SummableHashMap<PersistentUnitType> computedRefTypes = this.cumputeReferenceTypes(myUnit,
						factorUnit);
				// TODO: Ziel-UnitType finden
				final PersistentAbsUnitType targetUnitType = this.findTargetUnitType(computedRefTypes);

				if (targetUnitType != null) { // Ziel-UnitType gefunden :-)
					// TODO: Unit mit Ziel-UnitType suchen
					if (targetUnitType.inverseGetType().getLength() > 0) {
						targetUnit = targetUnitType.accept(new AbsUnitTypeReturnVisitor<PersistentAbsUnit>() {

							@Override
							public PersistentAbsUnit handleCompUnitType(PersistentCompUnitType compUnitType)
									throws PersistenceException {
								return compUnitType.inverseGetType().iterator().next();
							}

							@Override
							public PersistentAbsUnit handleUnitType(PersistentUnitType unitType)
									throws PersistenceException {
								return unitType.getDefaultUnit();
							}
						});
					}
					// TODO: Wenn gefunden, Unit verwenden

					// TODO: Wenn nein, Unit bauen und verwenden.
				} else { // Ziel-UnitType nicht gefunden :-(
					// TODO: Ziel UnitType bauen
					// TODO: Ziel Unit bauen, Unit verwenden
				}

				throw new NotComputableException("automatic creation of new Unit and UnitType not implemented yet");
			}

			try {
				Fraction product = factorAsQuantity.getAmount().mul(getThis().getAmount());
				PersistentQuantity result = QuantityManager.getTheQuantityManager().createQuantity(targetUnit, product);
				return result;
			} catch (Throwable e) {
				throw new NotComputableException(e.getMessage());
			}

		} else {
			PersistentCompoundQuantity factorAsCompoundQuantity = (PersistentCompoundQuantity) factor;
			return factorAsCompoundQuantity.mul(getThis());
		}
	}