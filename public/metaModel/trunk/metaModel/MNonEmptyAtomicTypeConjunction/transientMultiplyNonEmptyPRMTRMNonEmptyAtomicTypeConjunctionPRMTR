{
		final PersistentMNonEmptyAtomicTypeConjunction result = MNonEmptyAtomicTypeConjunction
				.createMNonEmptyAtomicTypeConjunction(true);
		try {
			getThis().getFactors().applyToAllException(new ProcdureException<PersistentMAtomicType, CycleException>() {

				@Override
				public void doItTo(PersistentMAtomicType argument) throws PersistenceException, CycleException {
					result.getFactors().add(argument);
				}
			});

			other.getFactors().applyToAllException(new ProcdureException<PersistentMAtomicType, CycleException>() {

				@Override
				public void doItTo(PersistentMAtomicType argument) throws PersistenceException, CycleException {
					result.getFactors().add(argument);
				}
			});
		} catch (CycleException e) {
			// TODO Should not occur
			e.printStackTrace();
		}
		return result;
	}