model metaMaster {

	server Server {
		derived skip-view TransactionManager transactionManager;

		void createAkteur(String name);
		void changeName(Akteur akteur, String nme [;akteur;name]);
		void addRole(Akteur akteur, RolleSUBTYPEName rollenName);

		void createProdukt(Akteur lieferant, String name);

		void createAuftrag(Akteur kunde, Akteur lieferant, Position** positionen);
		void addPosition(Auftrag auftrag, Produkt produkt, Integer anzahl);

		void deleteErrors();
	}

	singleton TransactionManager {
		Akteur ** akteure;
		active void createAkteur(String name) throws DoubleDefinition;
		active void addRole(Akteur akteur, RolleSUBTYPEName rollenName);
	}
	
	class Akteur {
		indexed prior String name;
		derived Rolle** meineRollen;
		void addRole(RolleSUBTYPEName rollenName);
	}
	
	string-factory abstract class Rolle {
		no-view symmetric(meineRollen) prior final Akteur rolleFuer;
	}

	class Kunde extends Rolle {}
	class Lieferant extends Rolle {
		Produkt** portfolio;
	}

	class Auftrag {
		Kunde auftraggeber;
		Lieferant auftragnehmer;
		Position** positionen;
	}

	class Produkt {
		String name;
	}

	class Position {
		Produkt beziehtSichAuf;
	}

	exception DoubleDefinition {}

}