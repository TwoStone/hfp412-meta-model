model metaMaster {


/*
TODO:
	- RoleManager (?)
	- OrderManager
	- ProductManager (?)
*/
server Server {
	derived skip-view ActorManager actorManager;
	void createActor(String name);
	void addRole(Actor actor, RoleSUBTYPEName roleName);
	void deleteErrors();
	void changeName(Actor actor, String nme [;actor;name]);
}

singleton ActorManager {
	Actor ** actors;
	active void createActor(String name) throws DoubleDefinition;
	active void addRole(Actor actor, RoleSUBTYPEName roleName); // Warum keinen RoleManager also eigene Rollenverwaltung?
}

singleton OrderManager {
	Position ** positions;
	active void createOrder(Role customer, Role contractor);
	active void addPosition(Position position);
}

class Actor {
	indexed prior String name;
	derived Role** myRoles;
	void addRole(RoleSUBTYPEName roleName);
}

class NaturalPerson extends Actor {}
class JuristicPerson extends Actor {}

string-factory abstract class Role {
	no-view symmetric prior final Actor roleFor;
}

class Customer extends Role {}
class Supplier extends Role {
	Product** portfolio;
}
	
class Order {
	prior final Customer customer;
	prior final Supplier contractor;
	Position** positions;
}

class Position {
	prior final Product relateTo;
	prior Integer amount;
}

class Product {
	indexed prior String name;
}


exception DoubleDefinition {}

}